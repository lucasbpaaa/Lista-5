#Um pouco sobre nó e lista encadeada:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self, lista = None):
        self.head = None
        self.size = 0
        if lista is not None:
            for element in lista:
                self.append(element)
      
    def append(self, element):
        if self.head:
            pointer = self.head
            while pointer.next:
                pointer = pointer.next
            pointer.next = Node(element)
        else:
            self.head = Node(element)
        self.size += 1
#Até aqui, o código pode retornar a cabeça (1000) usando print(FinalList.head.data) e a quantidade de elementos da lista usando print(FinalList.size).

FinalList = LinkedList([1000, 2, 3, 4])
print(FinalList.size)





def roman_number(number):
    translate_dict = {
        1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X',
        40: 'XL', 50: 'L', 90: 'XC', 100: 'C',
        400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'
    }
    result = ""
    for digit in number:

        result.append(translate_dict[digit])
        digit -= number
    return result
    
    
    
    
roman_number(12)
    
