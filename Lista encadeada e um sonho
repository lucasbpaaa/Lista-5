#Um pouco sobre nó e lista encadeada:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self, lista = None):
        self.head = None
        self.size = 0
        if lista is not None:
            for element in lista:
                self.append(element)
      
    def append(self, element):
        if self.head:
            pointer = self.head
            while pointer.next:
                pointer = pointer.next
            pointer.next = Node(element)
        else:
            self.head = Node(element)
        self.size += 1
#Até aqui, o código pode retornar a cabeça (1000) usando print(FinalList.head.data) e a quantidade de elementos da lista usando print(FinalList.size).

FinalList = LinkedList([1000, 2, 3, 4])
print(FinalList.size)


#Question 1:
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class Linked_list:
    def __init__(self, lista = None):
        self.head = Node(lista[0])
        self.size = 0
        current_node = self.head
        for element in lista[1:]:
            created_node = Node(element)
            current_node.next = created_node
            current_node = created_node
            self.size += 1
    def mostrar_final_list(self):
        current_node = self.head
        while current_node is not None:
            print( current_node.data)
            current_node = current_node.next

    def inversed_list(self):
        current_node = self.head
        invert = []
        while current_node is not None:
            invert.insert(0, current_node.data)
            current_node = current_node.next
        return Linked_list(invert)

lista = [5, 7, 8]
linked_initial_lista = Linked_list(lista)
linked_lista2 = linked_initial_lista.inversed_list()
linked_lista2.mostrar_final_list()




#Question 2:
def roman_number(number):
  translate_dict = {1: "I", 4: "IV", 5: "V", 9: "IX", 10: "X", 40: "XL", 50: "L", 90: "XC", 100: "C", 400: "CD", 500: "D", 900: "CM", 1000: "M"}
  roman = ""
  while number >= 1:
    if number >= 1000:
        roman += translate_dict[1000]
        number -= 1000
    if 1000 > number >= 900:
            roman += translate_dict[900]
            number -= 900
    if 900 > number >= 500:
            roman += translate_dict[500]
            number -= 500
    if 500 > number >= 400:
            roman += translate_dict[400]
            number -= 400
    if 400 > number >= 100:
            roman += translate_dict[100]
            number -= 100       
    if 100 > number >= 50:
            roman += translate_dict[50]
            number -= 50
    if 50 > number >= 40:
            roman += translate_dict[40]
            number -= 40
    if 40 > number >= 10:
            roman += translate_dict[10]
            number -= 10
    if number == 9:
            roman += translate_dict[9]
            number -= 9
    if 9 > number >= 5:
            roman += translate_dict[5]
            number -= 5
    if number == 4:
            roman += translate_dict[4] 
            number -= 4  
    if 4 > number >= 1:
            roman += translate_dict[1]
            number -= 1
    
  return roman
         
roman_number()


#Question 3:
def power_function(x:float, n:int):
    prod = 1
    if n>=0:
        for _ in range(n): #Estamos multiplicando prod por x, atualizando o valor de prod e multiplicando de novo. Esse processo é feito n vezes, ou seja, temos x**n.
            prod = prod*x  
    else:
        for _ in range(-n):
            prod = prod*(1/x)
    return prod

power_function(2.0, -7)
